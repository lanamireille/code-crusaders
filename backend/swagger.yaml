openapi: 3.0.0
info: 
  title: Sample API
  description: API Documentation experimentation for seng2021
  version: 1.0.0

paths:
  /:
    get:
      summary: Returns a greeting
      description: where does this go?
      tags:
      - examples
      parameters: 
        - in: path
          name: id
          required: true
          description: where does this description for param go
          schema:
            type: integer
      responses:
        200:
          description: greeting response
          content:
            application/json:
              schema:
                type: string
                example: Hello World!
    put:
      summary: Puts a greeting
      description: something about put
      tags:
      - examples
      parameters:
        - in: path
          name: userPassword
          required: true
          description: will this work?
          schema:
            type: string
      responses: 
        200:
          description: putting a greeting
          content:
            application/json:
              schema:
                type: string
                example: Hello World !
    post:
      summary: Posts a greeting
      description: something about post
      tags:
      - examples
      responses:
        200:
          description: posting a greeting
          content:
            application/json:
              schema:
                type: string
                example: Hello World  !
    delete: 
      summary: Deletes a greeting
      description: something about deleting stuff
      tags:
      - examples
      responses:
        400:
          description: invalid greeting
          content:
            application/json:
              schema:
                type: string
                example: Error400
        200:  
          description: deleting a greeting
          content:
            application/json:
              schema:
                type: string
                example: Goodbye World !








  /v1/order/create/form:
    post:
      summary: Creates an order form for a user
      description: Creates a standardized 2.1 UBL Order document based on user input from a manual form submission
      tags:
      - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  type: object
                  description: Order contains general order details
                buyer: 
                  type: object
                  description: Contains buyer-specific details
                delivery:
                  type: object
                  description: Contains order related details
                monetaryTotal:
                  type: object
                  description: Contains monetary values for the total order
                orderLines:
                  type: object
                  description: Contains information of each item within this order
                additionalDocumentReference:
                  type: object
                  description: Contains information on any additional supporting documents
      responses:
        200:
          description: Successfully created a new order form
          content:
            application/json:
              schema:
                type: integer
                example: orderId1
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request


  /v1/order/create/csv:
    post:
      summary: Creates a csv version of an order created
      description: Creates a standardised 2.1 UBL Order document based on data provided in a CSV file
      tags:
      - Order
      parameters:
        - in: path
          name: csvFile
          required: true
          description: csv file being uploaded
          schema:
            type: string
      responses:
        200:
          description: Successfully created a new order form
          content:
            application/json:
              schema:
                type: integer
                example: orderId1
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request
  /v1/order/create/pdf:
    post:
      summary: Creates a pdf version of an order created
      description: Creates a standardised 2.1 UBL Order document based on data provided in a PDF file
      tags:
      - Order
      parameters:
        - in: path
          name: pdfFile
          required: true
          description: pdf file being uploaded
          schema:
            type: string
      responses:
        200:
          description: Successfully created a new order form
          content:
            application/json:
              schema:
                type: integer
                example: orderId1
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request
  /v1/order/list:
    get:
      summary: Lists the orders of the user
      description: Lists all of the users UBL Order documents generated
      tags:
      - Order
      responses:
        200: 
          description: All of the users XML Order Documents contained as strings in an array
          content:
            application/json:
              schema:
                type: array
                example: ublOrderDocuments
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request
  /v1/order/{orderId}:
    get:
      summary: Gets a specific order of a user
      description: Gets a particular UBL Order Document
      tags:
      - Order
      parameters:
        - in: path
          name: orderId
          required: true
          description: ID of the particular document
          schema:
            type: integer
      responses:
        200: 
          description: Successfully got orderId
          content:
            application/json:
              schema:
                type: string
                example: ublDocument
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request 
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request

    put:
      summary: Updates the information of an order
      description: Update information on a UBL Order Document
      tags:
      - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  type: object
                  description: contains general order details
                buyer:
                  type: object
                  description: contains buyer-specific details
                seller:
                  type: object
                  description: contains seller-specific details
                originator:
                  type: object
                  description: contains details about the originator of the order
                transaction:
                  type: object
                  description: contains terms of the transaction
                monetaryTotal:
                  type: object
                  description: contains monetary values for the total order
                orderLines:
                  type: array
                  description: array containing info of each item within a specific order
                  items:
                    type: object
      responses:
        200: 
          description: Successfully updated order
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request

    delete:
      summary: Deletes a UBL Order Document
      description: Deletes a particular UBL Order Document identified by orderId
      tags:
      - Order
      parameters:
        - in: path
          name: orderId
          required: true
          description: ID of the particular document to be deleted
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted the order document
          content:
            application/json:
              schema:
                type: string
                example: "Order successfully deleted"
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request
        404:
          description: Order not found
          content:
            application/json:
              schema:
                type: string
                example: "Order not found"
  /v1/user/register:
    post:
      summary: Register a new user
      description: Registers a new user and returns a session token if successful
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                password:
                  type: string
                  description: User's password
                nameFirst:
                  type: string
                  description: User's first name
                nameLast:
                  type: string
                  description: User's last name
      responses:
        200:
          description: Successfully registered new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: User's session token
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request
  /v1/user/login:
    post:
      summary: Login a user
      description: Logs in a user and returns a session token if successful
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                password:
                  type: string
                  description: User's password
      responses:
        200:
          description: Successfully logged in user
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: User's session token
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request

  /v1/user/logout:
    post:
      summary: Logout a user
      description: Logs out the current user, invalidating their session token
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: User's current session token
      responses:
        200:
          description: Successfully logged out user
          content:
            application/json:
              schema:
                type: string
                example: "User successfully logged out"
        400:
          description: Client error, bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Bad request
        401:
          description: Unauthorised request
          content: 
            application/json:
              schema:
                type: object
                example: 
                  error: Unauthorised request

