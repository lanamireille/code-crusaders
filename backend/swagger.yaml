openapi: 3.0.0
info: 
  title: Order Creation API Documentation
  description: Outlines all the routes in our order creation API
  version: 1.0.0

paths:
  /v1/order/create/form:
    post:
      summary: Creates an order form for a user
      description: Creates a standardized 2.1 UBL Order document based on user input from a manual form submission
      tags:
      - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  type: object
                  description: Order contains general order details
                buyer: 
                  type: object
                  description: Contains buyer-specific details
                delivery:
                  type: object
                  description: Contains order related details
                monetaryTotal:
                  type: object
                  description: Contains monetary values for the total order
                orderLines:
                  type: object
                  description: Contains information of each item within this order
                additionalDocumentReference:
                  type: object
                  description: Contains information on any additional supporting documents
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
                    example: 12345
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/order/create/csv:
    post:
      summary: Creates a csv version of an order created
      description: Creates a standardised 2.1 UBL Order document based on data provided in a CSV file
      tags:
      - Order
      parameters:
        - in: path
          name: csvFile
          required: true
          description: csv file being uploaded
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
                    example: 12345
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/order/create/pdf:
    post:
      summary: Creates a pdf version of an order created
      description: Creates a standardised 2.1 UBL Order document based on data provided in a PDF file
      tags:
      - Order
      parameters:
        - in: path
          name: pdfFile
          required: true
          description: pdf file being uploaded
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
                    example: 12345
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/order/list:
    get:
      summary: Lists the orders of the user
      description: Lists all of the users UBL Order documents generated
      tags:
      - Order
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: [ "order1", "order2", "order3" ]
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/order/{orderId}:
    get:
      summary: Gets a specific order of a user
      description: Gets a particular UBL Order Document
      tags:
      - Order
      parameters:
        - in: path
          name: orderId
          required: true
          description: ID of the particular document
          schema:
            type: integer
      responses:
        200: 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ublDocument: 
                    type: string
                    example: "<Invoice><ID>12345</ID><CustomerName>John Smith</CustomerName></Invoice>"
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

    put:
      summary: Updates the information of an order
      description: Update information on a UBL Order Document
      tags:
      - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  type: object
                  description: contains general order details
                buyer:
                  type: object
                  description: contains buyer-specific details
                seller:
                  type: object
                  description: contains seller-specific details
                originator:
                  type: object
                  description: contains details about the originator of the order
                transaction:
                  type: object
                  description: contains terms of the transaction
                monetaryTotal:
                  type: object
                  description: contains monetary values for the total order
                orderLines:
                  type: array
                  description: array containing info of each item within a specific order
                  items:
                    type: object
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

    delete:
      summary: Deletes a UBL Order Document
      description: Deletes a particular UBL Order Document identified by orderId
      tags:
      - Order
      parameters:
        - in: path
          name: orderId
          required: true
          description: ID of the particular document to be deleted
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/user/register:
    post:
      summary: Register a new user
      description: Registers a new user and returns a session token if successful
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "Password123"
                nameFirst:
                  type: string
                  example: "John"
                nameLast:
                  type: string
                  example: "Smith"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "1t2nb34"
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/user/login:
    post:
      summary: Login a user
      description: Logs in a user and returns a session token if successful
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "Password123"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "1t2nb34"
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/user/logout:
    post:
      summary: Logout a user
      description: Logs out the current user, invalidating their session token
      tags:
        - User
      parameters:
        - name: token
          in: header
          description: userâ€™s current session token
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/user/statistics:
    get:
      summary: Returns a user's order statistics
      description: Retrieves statistics to display on the user's dashboard
      tags:
        - User
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatistics'
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/order/received/{orderId}:
    delete:
      summary: Deletes a received order
      description: Deletes a received UBL document from the user's inbox. The sender can still view it.
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          description: Order id to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/order/received/list:
    get:
      summary: Lists user's received orders
      description: Lists all of the user's received UBL documents
      tags:
        - Order
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: [ "order1", "order2", "order3" ]
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/order/sent/{orderId}:
    delete:
      summary: Unsends an order
      description: Deletes (unsends) a sent UBL document
      tags:
        - Order
      parameters: 
        - name: orderId
          in: path
          description: Order id to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/order/sent/list:
    get:
      summary: Lists user's sent orders
      description: Lists all of the userâ€™s sent UBL documents
      tags:
        - Order
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: [ "order1", "order2", "order3" ]
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"
  
  /v1/order/send:
    post:
      summary: Sends an order
      description: Sends a UBL order document 
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "receiver@example.com"
                orderId:
                  type: string
                  example: "12345"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/order/{orderId}/pdf:
    get:
      summary: Gets PDF copy of order
      description: Gets the PDF version of a UBL Order document
      tags:
      - Order
      parameters: 
        - name: orderId
          in: path
          description: Order id to generate a PDF copy
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: 
                  pdfLink: "https://example.com/files/sample.pdf"
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"
  
  /v1/user/details:
    put:
      summary: Updates a user's details
      description: Updates the details of the current user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Smith"
                password:
                  type: string
                  example: "Password123"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

    get: 
      summary: Gets a users details
      description: Get the details of the current user
      tags:
        - User
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                    example: "John"
                  lastName:
                    type: string
                    example: "Smith"
                  password:
                    type: string
                    example: "Password123"
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/user/reset:
    post:
      summary: Reset a user's password
      description: Allows a user to reset their password
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  example: 1234
                newPassword:
                  type: string
                  example: "Password123"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

  /v1/user/forgot:
    post:
      summary: Sends code for password reset
      description: Allows a user to reset their password
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequestResponse"
        401:
          $ref: "#/components/responses/UnauthorizedResponse"

components:
  responses:
    BadRequestResponse:
      description: Client error, bad request
      content:
        application/json:
          schema:
            type: object
            example:
              error: "Client error, bad request"
    UnauthorizedResponse:
      description: Unauthorized request
      content:
        application/json:
          schema:
            type: object
            example:
              error: "Unauthorized request"
  schemas:
    OrderStatistics:
      type: object
      properties:
        topThreeItems:
          type: array
          items:
            type: string
        numOrdersMonthly:
          type: array
          items:
            type: integer
        totalOrders:
          type: integer
        totalAmountMonth:
          type: number
          format: float
      example:
        topThreeItems: ["item1", "item2", "item3"]
        numOrdersMonthly: [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65]
        totalOrders: 1000
        totalAmountMonth: 2500.75
